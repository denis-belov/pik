{"version":3,"sources":["webpack://pik-webgl/./src/BspBuildWorker.js"],"names":["Vector3","constructor","x","y","z","this","clone","copy","v","set","add","sub","addVectors","a","b","subVectors","crossVectors","ax","ay","az","bx","by","bz","multiplyScalar","scalar","dot","applyMatrix4","e","w","min","Math","max","Plane","normal","constant","undefined","setFromNormalAndCoplanarPoint","point","Box3","expandByPoint","isEmpty","getCenter","target","rootNode","fromBufferAttribute","vec3","attribute","index","bspTree","BSPNode","plane","front","back","faces","BSPFace","c","face","_edge1","_edge2","sceneObjectArrayIndex","materialIndex","allFaces","globalBounds","collectObjectsRecursive","object","excludeHeavyObjecs","objects","name","toLowerCase","includes","position","length","push","setFace","vtx","Array","dists","sides","splitFace","splitPlane","coplanarFaces","frontFaces","backFaces","i","dist","i1","i2","t1","split01","t2","split02","frontFace","backFace1","backFace2","frontFace1","frontFace2","backFace","buildBspNode","node","bounds","depth","progressStart","progressRange","onProgress","faceIndex","size","abs","boundsCenter","childBounds","build","objectsArray","Date","now","console","log","objectIndex","materialCount","matrixWorld","drawRange","groups","il","group","j","start","jl","end","count","Infinity","makeTriangles","progress","onmessage","data","startTime","workerObjects","bspBuildTime","postMessage","terminateWorker","bspDataTransferTime"],"mappings":"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","file":"apartment-webgl.min.worker.js","sourcesContent":["// class Matrix4 {\r\n\r\n// \tconstructor() {\r\n\t\t\r\n// \t\tthis.elements = [\r\n\r\n// \t\t\t1, 0, 0, 0,\r\n// \t\t\t0, 1, 0, 0,\r\n// \t\t\t0, 0, 1, 0,\r\n// \t\t\t0, 0, 0, 1\r\n\r\n// \t\t];\r\n\r\n// \t\tif ( arguments.length > 0 ) {\r\n\r\n// \t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n// \t\t}\r\n\r\n// \t}\r\n\r\n// \tfromArray( array, offset = 0 ) {\r\n\r\n// \t\tfor ( let i = 0; i < 16; i ++ ) {\r\n\r\n// \t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n// \t\t}\r\n\r\n// \t\treturn this;\r\n\r\n// \t}\r\n// }\r\n\r\nclass Vector3 {\r\n\r\n\tconstructor ( x = 0, y = 0, z = 0 ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t};\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t}\r\n\r\n\tcopy( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tset( x, y, z ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tadd( v ) {\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsub( v ) {\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubVectors ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcrossVectors( a, b ) {\r\n\r\n\t\tconst ax = a.x, ay = a.y, az = a.z;\r\n\t\tconst bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\tthis.x = ay * bz - az * by;\r\n\t\tthis.y = az * bx - ax * bz;\r\n\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\tthis.z *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdot( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4 (e) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\t// const e = m;\r\n\r\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\r\n\r\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\r\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\r\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tmin( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmax( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n};\r\n\r\nclass Plane {\r\n\r\n\tconstructor( normal, constant ) {\r\n\r\n\t\t// normal is assumed to be normalized\r\n\r\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\r\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\r\n\r\n\t}\r\n\r\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = - point.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n}\r\n\r\nclass Box3 {\r\n\r\n\tconstructor( min, max ) {\r\n\t\r\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\r\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\r\n\t\r\n\t}\r\n\r\n\texpandByPoint( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tisEmpty() {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t}\r\n\r\n\tgetCenter( target ) {\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t}\r\n}\r\n\r\nvar rootNode = null;\r\n\r\nconst fromBufferAttribute = (vec3, attribute, index) => {\r\n\r\n\tvec3.x = attribute[(index * 3) + 0];\r\n\tvec3.y = attribute[(index * 3) + 1];\r\n\tvec3.z = attribute[(index * 3) + 2];\r\n\r\n\treturn vec3;\r\n}\r\n\r\nvar BSPTree = function () {\r\n\r\n\tvar BSPNode = function () {\r\n\t\tthis.plane = null;\r\n\t\tthis.front = null;\r\n\t\tthis.back = null;\r\n\t\tthis.faces = null;\r\n\t}\r\n\r\n\tvar BSPFace = function (a, b, c, face) {\r\n\t_edge1.subVectors(b, a);\r\n\t_edge2.subVectors(c, a);\r\n\t\tthis.normal = new Vector3();\r\n\t\tthis.normal.crossVectors(_edge1, _edge2);    // face-triangle intersection uses unnormalized normal!\r\n\r\n\t\tthis.a = a;\r\n\t\tthis.b = b;\r\n\t\tthis.c = c;\r\n\t\tthis.sceneObjectArrayIndex = face.sceneObjectArrayIndex;\r\n\t\tthis.materialIndex = face.materialIndex;\r\n\t}\r\n\r\n\tvar maxDepth = 14;\r\n\tvar heavyObjectVertexCount = 2500;\r\n\tvar allFaces = [];\r\n\tvar globalBounds = new Box3();\r\n\r\n\tvar _edge1 = new Vector3();\r\n\tvar _edge2 = new Vector3();\r\n\r\n\tfunction collectObjectsRecursive(object, excludeHeavyObjecs, objects) {\r\n\t\t// console.log(object);\r\n\t\t// Exclude very heavy objects.\r\n\t\tif (excludeHeavyObjecs && !object.name.toLowerCase().includes(\"wall\")) {\r\n\t\t\tif (object.position.length / 3 > heavyObjectVertexCount)\r\n\t\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tobjects.push(object);\r\n\t}\r\n\r\n\tfunction setFace(a, b, c, sceneObjectArrayIndex, materialIndex) {\r\n\t\tvar face = new BSPFace(\r\n\t\t\ta.clone(),\r\n\t\t\tb.clone(),\r\n\t\t\tc.clone(),\r\n\t\t\t{\r\n\t\t\t\tsceneObjectArrayIndex,\r\n\t\t\t\tmaterialIndex,\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tglobalBounds.expandByPoint(a);\r\n\t\tglobalBounds.expandByPoint(b);\r\n\t\tglobalBounds.expandByPoint(c);\r\n\r\n\t\tallFaces.push(face);\r\n\t}\r\n\r\n\tfunction makeTriangles(objects) {\r\n\t\tvar a = new Vector3();\r\n\t\tvar b = new Vector3();\r\n\t\tvar c = new Vector3();\r\n\r\n\t\t// Collect and transform to world space all vertices and triangles.\r\n\t\tfor (var objectIndex = 0; objectIndex < objects.length; objectIndex++) {\r\n\t\t\tvar object = objects[objectIndex];\r\n\t\t\tvar materialCount = object.materialCount;\r\n\t\t\tvar matrixWorld = object.matrixWorld;\r\n\r\n\t\t\tvar position = object.position;\r\n\t\t\t// const position2 = object.position.slice();\r\n\t\t\tvar index = object.index;\r\n\t\t\tvar drawRange = object.drawRange;\r\n\t\t\tvar groups = object.groups;\r\n\r\n\t\t\t// const matrix = new Matrix4().fromArray(matrixWorld);\r\n\t\t\t// console.log(matrixWorld);\r\n\r\n\t\t\tif (index) {   // Indexed buffer geometry\r\n\t\t\t\tconsole.log(index);\r\n\t\t\t\tif (materialCount) {\r\n\t\t\t\t\tfor (var i = 0, il = groups.length; i < il; i ++ ) {\r\n\t\t\t\t\t\tvar group = groups[i];\r\n\t\t\t\t\t\tvar start = Math.max(group.start, drawRange.start);\r\n\t\t\t\t\t\tvar end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\r\n\r\n\t\t\t\t\t\tfor (var j = start, jl = end; j < jl; j += 3 ) {\r\n\t\t\t\t\t\t\t// console.log(position[index[j + 0]] === Infinity, position[index[j + 1]] === Infinity, position[index[j + 2]] === Infinity);\r\n\t\t\t\t\t\t\tposition[(index[j + 0] * 3) + 0] !== Infinity ? fromBufferAttribute(a, position, index[j + 0]).applyMatrix4(matrixWorld) : null;\r\n\t\t\t\t\t\t\tposition[(index[j + 1] * 3) + 0] !== Infinity ? fromBufferAttribute(b, position, index[j + 1]).applyMatrix4(matrixWorld) : null;\r\n\t\t\t\t\t\t\tposition[(index[j + 2] * 3) + 0] !== Infinity ? fromBufferAttribute(c, position, index[j + 2]).applyMatrix4(matrixWorld) : null;\r\n\t\t\t\t\t\t\tsetFace(a, b, c, object.sceneObjectArrayIndex, group.materialIndex);\r\n\r\n\t\t\t\t\t\t\tposition[(index[j + 0] * 3) + 0] = Infinity;\r\n\t\t\t\t\t\t\tposition[(index[j + 1] * 3) + 0] = Infinity;\r\n\t\t\t\t\t\t\tposition[(index[j + 2] * 3) + 0] = Infinity;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvar start = Math.max(0, drawRange.start);\r\n\t\t\t\t\tvar end = Math.min(index.length, drawRange.start + drawRange.count);\r\n\t\t\t\t\tfor (var i = start; i < end; i += 3) {\r\n\t\t\t\t\t\t// console.log(position[index[i + 0]] === Infinity, position[index[i + 1]] === Infinity, position[index[i + 2]] === Infinity);\r\n\t\t\t\t\t\tposition[(index[i + 0] * 3) + 0] !== Infinity ? fromBufferAttribute(a, position, index[i + 0]).applyMatrix4(matrixWorld) : null;\r\n\t\t\t\t\t\tposition[(index[i + 1] * 3) + 0] !== Infinity ? fromBufferAttribute(b, position, index[i + 1]).applyMatrix4(matrixWorld) : null;\r\n\t\t\t\t\t\tposition[(index[i + 2] * 3) + 0] !== Infinity ? fromBufferAttribute(c, position, index[i + 2]).applyMatrix4(matrixWorld) : null;\r\n\t\t\t\t\t\tsetFace(a, b, c, object.sceneObjectArrayIndex, 0);\r\n\r\n\t\t\t\t\t\tposition[(index[i + 0] * 3) + 0] = Infinity;\r\n\t\t\t\t\t\tposition[(index[i + 1] * 3) + 0] = Infinity;\r\n\t\t\t\t\t\tposition[(index[i + 2] * 3) + 0] = Infinity;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse { // Non indexed geometry\r\n\t\t\t\tif (materialCount) {\r\n\t\t\t\t\tfor (var i = 0, il = groups.length; i < il; i ++ ) {\r\n\t\t\t\t\t\tvar group = groups[i];\r\n\t\t\t\t\t\tvar start = Math.max(group.start, drawRange.start);\r\n\t\t\t\t\t\tvar end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\r\n\r\n\t\t\t\t\t\tfor (var j = start, jl = end; j < jl; j += 3 ) {\r\n\t\t\t\t\t\t\tposition[(j * 3) + 0] !== Infinity ? fromBufferAttribute(a, position, j).applyMatrix4(matrixWorld) : null;\r\n\t\t\t\t\t\t\tposition[((j+1) * 3) + 0] !== Infinity ? fromBufferAttribute(b, position, j+1).applyMatrix4(matrixWorld) : null;\r\n\t\t\t\t\t\t\tposition[((j+2) * 3) + 0] !== Infinity ? fromBufferAttribute(c, position, j+2).applyMatrix4(matrixWorld) : null;\r\n\t\t\t\t\t\t\tsetFace(a, b, c, object.sceneObjectArrayIndex, group.materialIndex);\r\n\r\n\t\t\t\t\t\t\tposition[(j * 3) + 0] = Infinity;\r\n\t\t\t\t\t\t\tposition[((j+1) * 3) + 0] = Infinity;\r\n\t\t\t\t\t\t\tposition[((j+2) * 3) + 0] = Infinity;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvar start = Math.max(0, drawRange.start);\r\n\t\t\t\t\tvar end = Math.min(position.length / 3, drawRange.start + drawRange.count);\r\n\t\t\t\t\tfor (var i = start; i < end; i += 3) {\r\n\t\t\t\t\t\tposition[(i * 3) + 0] !== Infinity ? fromBufferAttribute(a, position, i).applyMatrix4(matrixWorld) : null;\r\n\t\t\t\t\t\tposition[((i+1) * 3) + 0] !== Infinity ? fromBufferAttribute(b, position, i+1).applyMatrix4(matrixWorld) : null;\r\n\t\t\t\t\t\tposition[((i+2) * 3) + 0] !== Infinity ? fromBufferAttribute(c, position, i+2).applyMatrix4(matrixWorld) : null;\r\n\t\t\t\t\t\tsetFace(a, b, c, object.sceneObjectArrayIndex, 0);\r\n\r\n\t\t\t\t\t\tposition[(i * 3) + 0] = Infinity;\r\n\t\t\t\t\t\tposition[((i+1) * 3) + 0] = Infinity;\r\n\t\t\t\t\t\tposition[((i+2) * 3) + 0] = Infinity;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tvar coplanarTolerance = 0.0001;\r\n\tvar vtx = new Array(3);\r\n\tvar dists = new Array(3);\r\n\tvar sides = new Array(3);\r\n\r\n\tfunction splitFace(face, splitPlane, coplanarFaces, frontFaces, backFaces) {\r\n\t\tvtx[0] = face.a;\r\n\t\tvtx[1] = face.b;\r\n\t\tvtx[2] = face.c;\r\n\r\n\t\tfor (var i=0; i<3; i++) {\r\n\t\t\tvar dist = splitPlane.normal.dot(vtx[i]) + splitPlane.constant;\r\n\t\t\t\tdists[i] = dist;\r\n\t\t\tif (dist > coplanarTolerance)\r\n\t\t\t\tsides[i] = 1;\r\n\t\t\telse if (dist < -coplanarTolerance)\r\n\t\t\t\tsides[i] = -1;\r\n\t\t\telse\r\n\t\t\t\tsides[i] = 0;\r\n\t\t}\r\n\r\n\t\tif (sides[0] == 0 && sides[1] == 0 && sides[2] == 0) {\r\n\t\t\tcoplanarFaces.push(face);\r\n\t\t}\r\n\t\telse if (sides[0] >= 0 && sides[1] >= 0 && sides[2] >= 0) {\r\n\t\t\tfrontFaces.push(face);\r\n\t\t}\r\n\t\telse if (sides[0] <= 0 && sides[1] <= 0 && sides[2] <= 0) {\r\n\t\t\tbackFaces.push(face);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor (var i=0; i<3; i++) {\r\n\t\t\t\tvar i1 = (i+1) % 3;\r\n\t\t\t\tvar i2 = (i+2) % 3;\r\n\r\n\t\t\t\tif (sides[i] > 0 && sides[i1] <= 0 && sides[i2] <= 0) {\r\n\t\t\t\t\tvar t1 = dists[i] / (dists[i]-dists[i1]);\r\n\t\t\t\t\tvar split01 = vtx[i1].clone().sub(vtx[i]).multiplyScalar(t1).add(vtx[i]);\r\n\t\t\t\t\tvar t2 = dists[i] / (dists[i]-dists[i2]);\r\n\t\t\t\t\tvar split02 = vtx[i2].clone().sub(vtx[i]).multiplyScalar(t2).add(vtx[i]);\r\n\r\n\t\t\t\t\tvar frontFace = new BSPFace(vtx[i], split01, split02, face);\r\n\t\t\t\t\tvar backFace1 = new BSPFace(split01, vtx[i1], vtx[i2], face);\r\n\t\t\t\t\tvar backFace2 = new BSPFace(split02, split01, vtx[i2], face);\r\n\r\n\t\t\t\t\tfrontFaces.push(frontFace);\r\n\t\t\t\t\tbackFaces.push(backFace1);\r\n\t\t\t\t\tbackFaces.push(backFace2);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse if (sides[i] < 0 && sides[i1] >= 0 && sides[i2] >= 0) {\r\n\t\t\t\t\tvar t1 = dists[i] / (dists[i]-dists[i1]);\r\n\t\t\t\t\tvar split01 = vtx[i1].clone().sub(vtx[i]).multiplyScalar(t1).add(vtx[i]);\r\n\t\t\t\t\tvar t2 = dists[i] / (dists[i]-dists[i2]);\r\n\t\t\t\t\tvar split02 = vtx[i2].clone().sub(vtx[i]).multiplyScalar(t2).add(vtx[i]);\r\n\r\n\t\t\t\t\tvar frontFace1 = new BSPFace(split01, vtx[i1], vtx[i2], face);\r\n\t\t\t\t\tvar frontFace2 = new BSPFace(split02, split01, vtx[i2], face);\r\n\t\t\t\t\tvar backFace = new BSPFace(vtx[i], split01, split02, face);\r\n\r\n\t\t\t\t\tfrontFaces.push(frontFace1);\r\n\t\t\t\t\tfrontFaces.push(frontFace2);\r\n\t\t\t\t\tbackFaces.push(backFace);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction buildBspNode(node, faces, bounds, depth, progressStart, progressRange, onProgress) {\r\n\t\tif (faces.length == 0)\r\n\t\t\t\treturn;\r\n\r\n\t\tif (depth >= maxDepth || faces.length < 40) {\r\n\t\t\tnode.faces = new Array();\r\n\t\t\tfor (var faceIndex = 0; faceIndex < faces.length; faceIndex++) {\r\n\t\t\t\tvar face = faces[faceIndex];\r\n\t\t\t\tnode.faces.push(face);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar size = bounds.max.clone().sub(bounds.min);\r\n\t\tsize.x = Math.abs(size.x);\r\n\t\tsize.y = Math.abs(size.y);\r\n\t\tsize.z = Math.abs(size.z);\r\n\r\n\t\tvar normal = new Vector3();\r\n\t\tif (size.x >= size.y && size.x >= size.z)\r\n\t\t\tnormal.set(1, 0, 0);\r\n\t\telse if (size.y >= size.x && size.y >= size.z)\r\n\t\t\tnormal.set(0, 1, 0);\r\n\t\telse\r\n\t\t\tnormal.set(0, 0, 1);\r\n\r\n\t\tvar boundsCenter = new Vector3();\r\n\t\tbounds.getCenter(boundsCenter);\r\n\r\n\t\tvar plane = new Plane();\r\n\t\tplane.setFromNormalAndCoplanarPoint(normal, boundsCenter);\r\n\r\n\t\tvar coplanarFaces = new Array();\r\n\t\tvar frontFaces = new Array();\r\n\t\tvar backFaces = new Array();\r\n\r\n\t\tfor (var faceIndex = 0; faceIndex < faces.length; faceIndex++) {\r\n\t\t\tvar face = faces[faceIndex];\r\n\t\t\tsplitFace(face, plane, coplanarFaces, frontFaces, backFaces);\r\n\t\t}\r\n\r\n\t\tnode.plane = plane;\r\n\t\tnode.faces = coplanarFaces;\r\n\r\n\t\tif (frontFaces.length > 0) {\r\n\t\t\tvar childBounds;\r\n\t\t\tif (normal.x == 1)\r\n\t\t\t\tchildBounds = new Box3(new Vector3((bounds.min.x + bounds.max.x)/2, bounds.min.y, bounds.min.z), bounds.max.clone());\r\n\t\t\telse if (normal.y == 1)\r\n\t\t\t\tchildBounds = new Box3(new Vector3(bounds.min.x, (bounds.min.y + bounds.max.y)/2, bounds.min.z), bounds.max.clone());\r\n\t\t\telse\r\n\t\t\t\tchildBounds = new Box3(new Vector3(bounds.min.x, bounds.min.y, (bounds.min.z + bounds.max.z)/2), bounds.max.clone());\r\n\r\n\t\t\tnode.front = new BSPNode();\r\n\t\t\tbuildBspNode(node.front, frontFaces, childBounds, depth+1, progressStart, progressRange/2, onProgress);\r\n\t\t}\r\n\r\n\t\tif (depth < 3)\r\n\t\t\tonProgress(progressStart + progressRange/2);\r\n\r\n\t\tif (backFaces.length > 0) {\r\n\t\t\tvar childBounds;\r\n\t\t\tif (normal.x == 1)\r\n\t\t\t\tchildBounds = new Box3(bounds.min.clone(), new Vector3((bounds.min.x + bounds.max.x)/2, bounds.max.y, bounds.max.z));\r\n\t\t\telse if (normal.y == 1)\r\n\t\t\t\tchildBounds = new Box3(bounds.min.clone(), new Vector3(bounds.max.x, (bounds.min.y + bounds.max.y)/2, bounds.max.z));\r\n\t\t\telse\r\n\t\t\t\tchildBounds = new Box3(bounds.min.clone(), new Vector3(bounds.max.x, bounds.max.y, (bounds.min.z + bounds.max.z)/2));\r\n\r\n\t\t\tnode.back = new BSPNode();\r\n\t\t\tbuildBspNode(node.back, backFaces, childBounds, depth+1, progressStart+progressRange/2, progressRange/2, onProgress);\r\n\t\t}\r\n\r\n\t\tif (depth < 4)\r\n\t\t\tonProgress(progressStart + progressRange);\r\n\t}\r\n\r\n\tthis.build = function (object, excludeHeavyObjecs, onProgress) {\t\t\r\n\t\tvar objectsArray = new Array();\r\n\t\t// object.updateMatrixWorld(true);\r\n\t\tconst a = Date.now();\r\n\t\tfor (let i = 0; i < object.length; ++i) {\r\n\t\t\tcollectObjectsRecursive(object[i], excludeHeavyObjecs, objectsArray);\r\n\t\t}\r\n\t\tconsole.log('collectObjectsRecursive', Date.now() - a);\r\n\r\n\t\t// console.log(objectsArray);\r\n\t\tconst b = Date.now();\r\n\t\tmakeTriangles(objectsArray);\r\n\t\tconsole.log('makeTriangles', Date.now() - b);\r\n\r\n\t\tif (onProgress !== undefined)\r\n\t\t\tonProgress(5);\r\n\r\n\t\trootNode = new BSPNode();\r\n\t\tconst c = Date.now();\r\n\t\tbuildBspNode(rootNode, allFaces, globalBounds, 0, 5, 95,\r\n\t\t\tfunction(progress) {\r\n\t\t\t\tif (onProgress !== undefined)\r\n\t\t\t\t\tonProgress(progress);\r\n\t\t\t});\t\r\n\t\tconsole.log('buildBspNode', Date.now() - c);\t\r\n\t}\r\n}\r\n\r\nconst bspTree = new BSPTree();\r\n\r\nonmessage = ({ data }) => {\t\r\n\tconsole.log(\"Building bsp tree...\");\t\t\r\n\tvar startTime = Date.now();\r\n\tbspTree.build(data.workerObjects, true);\t\r\n\tvar bspBuildTime = Date.now() - startTime;6\r\n\tconsole.log(`BSP build time = ${bspBuildTime} ms`);\r\n\r\n\tstartTime = Date.now();\r\n\tpostMessage({ rootNode, bspBuildTime, terminateWorker: false });\r\n\tvar bspDataTransferTime = Date.now() - startTime;\r\n\tconsole.log(`BSP data transfer to the main thread = ${bspDataTransferTime} ms`);\r\n\tpostMessage({ bspDataTransferTime, terminateWorker: true });\r\n};\r\n"],"sourceRoot":""}